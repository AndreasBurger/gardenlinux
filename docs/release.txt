debian release

release triggern: aenderungen am git ... updates am security debrepo (security, patch)

repo: default debian
      security debian
      debug debian

<platform>-<extensions>_<modifiers>-<arch>-<day since apr 1st 2020>.<release>-<gitish>
commit id

snapshot 30st. <5tage
--------
metal-ghost_pxe-amd64-16-7a3fb  (wird nach 5tagen geloescht oder bei mehr snapshots)
aws-chost-amd64-16-33af2
metal-ghost_pxe-amd64-16-a11ef  (daily wirf nach 30 tagen geloescht)
metal-ghost_pxe-amd64-16-addef  (ist stable unlimitiert alt wir keepen auch history!!!)

16 = 1.april 2020 + 16 = 20200416 00:00:00 UTC

fuer jeden HEAD-update ein snapshot(uni) -> 
wird entfernt wenn integrity/unit not green dann einzelnes target weg
(mit benachrichtung per email und github und buildlog)
(liste mit relevant targets to build und to be green)

build.yaml
release:
  - platforms: [ metal ]
    extensions: [ [ ghost ] , [ chost ] , [ vhost ] ]
    modifiers: [ [ prod ] ]
    fails: [ unit, integration ]      default fails [ unit, integration ]
  - platforms: [ base ]
  - platforms: [ base ]
    extensions: [ build ]
  - platforms: [ metal ]
  - plaforms: [ aws, azure, gcp, ali, openstack, vmware, kvm ]
    extensions: [ [ ghost ] , [ chost ] ]
    modifiers: [ [ prod ] ]
  - plaforms: [ aws, azure, gcp, ali, openstack, vmware, kvm ] 
  - plaforms: [ gcp ] 
    extensions: [ [ chost ] ]
    modifiers: [ [ prod ] ]
    fails: [ unit ]       -> please do not delete when integration test fails


when komplette build yaml erfuellt oder um 23:59 bei release trigger ausgeloest  
kann man pipline 16-7a3fb zum release ueberreden (um 23:59 gibts nen gelease)


daily (all tests are green) max 20st. oder <30tage  werden git-tagt
-------
metal-ghost_pxe-amd64-16.0 -> 16-addef (btw is stable never delete !)
metal-ghost_pxe-amd64-16.1 -> 16-a11ef
metal-ghost_pxe-amd64-16.2
metal-ghost_pxe-amd64-17.0
metal-ghost_pxe-amd64-19.0
metal-ghost_pxe-amd64-21.0
metal-ghost_pxe-amd64-latest -> 21.0

sobald aenderungen an xx.y -> branch wiederum release via 
pipeline 16-7a3fb verkuenden
(die pipeline zaehlt die tags - die selbst gesetzt hat - weiter 
um von 16.7 auf 16.8 zu kommen)

pipeline
--------
pipeline baut nach commit: <platform>-<extensions>_<modifiers>-<arch>-<day since apr 1st 2020>-<githash>
-laeuft durch gruen done
-schlaegt fehlt email an commiter
--war fuer die fuess
--pipeline "mach 16-7a3fb" -> alles nochmal bauen was fehlt

implizit pipeline checkt um 23:59 UTC:
- gibt es seit dem letzten update (get all releases still in snapshot (includes stable beta daily): 16.3 16.0 17.1 17.2 17.3 nur majors untersuchen: 16 und 17 ob seit letztem minor update auf security fur relevante pakete)

pipeline "mach daily 16-7a3fb" -> wenn 16-7a3fb ALLES gruen dann symlinked
  auf den und neuer name im daily folder <platform>-<extensions>_<modifiers>-<arch>-<day since apr 1st 2020>.x
  wobei x = vorherige .version +1
pipeline "mach stable,beta - 16.3" -> symlinken und nach cloud publizieren (ami ids hinzufuegen)

release (manual) 52*500M * 3 75G wird ein git-branch
-------
metal-ghost_prod_pxe-stable -> 16.0
metal-ghost_prod_pxe-beta -> 19.0


verzeichnis:
arch / snaphot / release|daily /
arch / major version / release|daily|snapshot /

current: .build/base/20200420/amd64/bullseye/


target:
$prefix = .build -> local
$prefix = .build/snapshot/$arch -> pipeline
$suffix = <heute>-a11ef

--features=metal,ghost,horst,franz,pxe
Note:
  erkenne nur ein PLATFORM! -> steht vorn
  erkenne extensions -> sort alphanum after platform divider -
  erkenne modifiers -> sort alpha after extension divider -


$prefix/ $platform-$extension-$modifier-$suffix.*

eg
.build/snapshot/ metal-ghost-horst-franz-pxe-$suffix


.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef.tar.xz
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef.tar.xz.sha256
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef.manifest -> alle files mit version
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef.os-release -> os stamp
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef.license.tar.gz -> alle lizenzen used sorted by license
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<heute>-a11ef
.build/snapshot/amd64/ metal-ghost_pxe-amd64-<branch>-a11ef

symlinks:
.build/daily   /amd64/ 16.0 / 52mal
.build/daily   /amd64/ 16.1 / 52mal
$prefix/daily   /amd64/ 16.5 / 52mal
$prefix/daily   /amd64/ 17.0 / 52mal
$prefix/daily   /amd64/ 18.0 / 52mal
$prefix/daily   /amd64/ 20.0 / 52mal
$prefix/daily   /amd64/ 21.0 / 52mal
$prefix/beta    /amd64/ 52mal  -> daily/amd64/20.0
$prefix/stable  /amd64/ 52mal  -> daily/amd64/16.1







base
base_build
2+
(metal) x (chost,ghost,vhost mit _prod, ohne _prod) x (pxe, )
8+
(aws,azure,gcp,ali,openstack,vmware,kvm)x(chost,ghost mit _prod, ohne _prod)x(pxe, )
42+



dev on demand

metal-ghost_pxe-amd64-16-7a3fb

alle repos die teil unserer quellen sind muessen ein snapshot repo haben. und diese snapshot muss ueber epoch referenziert werden (hier 16). ABER
z.b. das repo debian-security: das ist ein repo welches ein snapshot haben muss und zum build zeitpunkt einmal mit der EPOCH gebaut wirdsymlinken und aber vor
finalem tar noch ein apt-get update gegen debian-security mit timestamp des commits mit minuten und sekunden bekommt (dokumentiert natuerlich). 
fuer einen spezifischen tag die selbe checksumme haben. 
ABER die releasten files - docker, raw, vmdk bla brauchen weiteren aenderungen: 
	- saemtliche filesystem ID's duerfen wirklich GUUID's sein (frage: set filesystem guid on first boot?)
	- saemtliche partitions ebenfalls (frage: same)
